#Base de Datos Seguimiento de Atencion
drop database if exists seguimientoatencion;
cr#Base de Datos Seguimiento de Atencion
drop database if exists seguimientoatencion;
create database if not exists seguimientoatencion;
use seguimientoatencion;

#Crear Tabla Personas
CREATE TABLE IF NOT EXISTS persona (
    idpersona INT AUTO_INCREMENT NOT NULL,
    nombres VARCHAR(45) NOT NULL,
    apellidos VARCHAR(45) NOT NULL,
    dni INT(8) NOT NULL UNIQUE,
    direccion VARCHAR(80) NOT NULL,
    fecnac DATE NOT NULL,
    genero ENUM('masculino', 'femenino') NOT NULL,
    email VARCHAR(50) NOT NULL UNIQUE,
    telefono INT(9) NULL,
    estado ENUM('activo', 'inactivo') NOT NULL,
    tipo ENUM('paciente', 'doctor', 'empleado') NOT NULL,
    CONSTRAINT pk_idpersona PRIMARY KEY (idpersona)
);


#Crear Tabla Areas
create table if not exists areas(
idarea int auto_increment not null,
descripcion varchar(50) not null,

constraint pk_idarea primary key(idarea)
);
#Crear Tabla Usuarios
create table if not exists usuario(
idusuario int auto_increment not null,
usuario VARCHAR(20) NOT NULL,
pass VARCHAR(16) NOT NULL,
idpersona int not null,

constraint pk_usuario primary key(idusuario),
constraint fk_usuarioper foreign key(idusuario) references persona(idpersona)
);

#Crear Tabla Pacientes
create table if not exists paciente(
idpaciente int auto_increment not null,
nrohistoria varchar(20) not null unique,
idpersona int not null,

constraint pk_idpaciente primary key(idpaciente),
constraint fk_idpaciente_per foreign key(idpersona) references persona(idpersona)
);

#Crear Tabla empleados
create table if not exists empleados(
idempleado int auto_increment not null,
turno varchar(20) not null,
cargo varchar(20) not null,
idpersona int not null,

constraint pk_idempleado primary key(idempleado),
constraint fk_idempleado_per foreign key(idpersona) references persona(idpersona)
);

#Crear Tabla doctores
create table if not exists doctores(
iddoctor int auto_increment not null,
especialidad varchar(20) not null,
turno enum('ma√±ana','tarde','noche') not null,
idpersona int not null,

constraint pk_iddoctor primary key(iddoctor),
constraint fk_iddoctor_per foreign key(idpersona) references persona(idpersona)
);

#Crear Tabla AtencionCitas
create table if not exists atencioncitas(
idatencion int auto_increment not null,
fecha date null,
fechacita date  null,
iddoctor int not null,
idarea int not null,
idpaciente int not null,

constraint pk_idatencion primary key(idatencion),
constraint fk_idatencion_doctor foreign key(iddoctor) references doctores(iddoctor),
constraint fk_idatencion_area foreign key(idarea) references areas(idarea),
constraint fk_idatencion_paciente foreign key(idpaciente) references paciente(idpaciente)

);


#Crear Tabla Tratamiento
create table if not exists tratamiento(
idtratamiento int auto_increment not null,
descripcion varchar(100) not null,
idatencion int not null,
constraint pk_idtratamiento primary key(idtratamiento),
constraint fk_idtratamiento_at foreign key(idatencion) references atencioncitas(idatencion)
);

#Crear Tabla Analisis
create table if not exists analisis(
idanalisis int auto_increment not null,
descripcion varchar(50) null,
idatencion int not null,

constraint pk_idanalisis primary key(idanalisis),
constraint fk_idtratamiento_ate foreign key(idatencion) references atencioncitas(idatencion)
);

#Crear Tabla Diagnostico
create table if not exists diagnostico(
iddiagnostico int auto_increment not null,
descripcion varchar(100) null,
idatencion int not null,

constraint pk_iddiagnostico primary key(iddiagnostico),
constraint fk_iddiagnostico_at foreign key(idatencion) references atencioncitas(idatencion)

);

#Crear Tabla Seguimiento
create table if not exists seguimiento(
idseguimiento int auto_increment not null,
aentrega varchar(30) not null,
arecepcion varchar(30) not null,
idatencion int not null,

constraint pk_idseguimiento primary key(idseguimiento),
constraint fk_idseguimiento_atencion foreign key(idatencion) references atencioncitas(idatencion)
);


#PROCEDIMIENTO ALMACENADO PARA VALIDAR USUARIO #
DELIMITER $$
CREATE PROCEDURE up_usuario
(
IN _nombre VARCHAR(50),
IN _pass VARCHAR(100)
)
BEGIN
SELECT * FROM usuario WHERE nombre=_nombre AND pass=_pass;
END
$$

#####################################PROCEDIMIENTOS ALMACENADOS#############################3

DELIMITER ;;
CREATE  PROCEDURE up_insertar_areas(
		IN _descripcion varchar(50)
)
BEGIN
		insert into areas(descripcion)
		values (_descripcion);
END ;;


DELIMITER ;;
CREATE  PROCEDURE up_insertar_persona(
		IN _nombres varchar(50),
		IN _apellidos varchar(40),
		IN _dni int(8),
		IN _direccion varchar(80),
		IN _fecnac date,
    IN _genero varchar(1),
        IN _email varchar(50),
        IN _telefono int(9),
        IN _estado varchar(10),
        IN _tipo varchar(20)
)
BEGIN
	INSERT INTO persona (nombres,apellidos,dni,direccion,fecnac,genero,email,telefono,estado,tipo)
    values (_nombres,_apellidos,_dni,_direccion,_fecnac,_genero,_email,_telefono,_estado,_tipo);
END ;;


DELIMITER ;;
CREATE PROCEDURE up_insertar_persona_paciente(
		IN _nombres varchar(50),
		IN _apellidos varchar(40),
		IN _dni int(8),
		IN _direccion varchar(80),
		IN _fecnac date,
        IN _genero varchar(1),
        IN _email varchar(50),
        IN _telefono int(9),
        IN _estado varchar(10),
        IN _tipo varchar(20),

        IN _nrohistoria varchar(20)
)
BEGIN
		INSERT INTO persona (nombres,apellidos,dni,direccion,fecnac,genero,email,telefono,estado,tipo)
		values (_nombres,_apellidos,_dni,_direccion,_fecnac,_genero,_email,_telefono,_estado,_tipo);
        insert into paciente (nrohistoria)
        values (_nrohistoria);
END ;;

DELIMITER ;;
CREATE PROCEDURE up_insertar_persona_empleados(
		IN _nombres varchar(50),
		IN _apellidos varchar(40),
		IN _dni int(8),
		IN _direccion varchar(80),
		IN _fecnac date,
        IN _genero varchar(1),
        IN _email varchar(50),
        IN _telefono int(9),
        IN _estado varchar(10),
        IN _tipo varchar(20),

        IN _turno varchar(20),
        IN _cargo varchar(10)
)
BEGIN
		insert into persona (nombres,apellidos,dni,direccion,fecnac,genero,email,telefono,estado,tipo)
		values (_nombres,_apellidos,_dni,_direccion,_fecnac,_genero,_email,_telefono,_estado,_tipo);
        insert into empleados (turno,cargo)
        values (_turno, _cargo);
END ;;

DELIMITER ;;
CREATE PROCEDURE up_insertar_persona_doctores(
		IN _nombres varchar(50),
		IN _apellidos varchar(40),
		IN _dni int(8),
		IN _direccion varchar(80),
		IN _fecnac date,
        IN _genero varchar(1),

        IN _email varchar(50),
        IN _telefono int(9),
        IN _estado varchar(10),
        IN _tipo varchar(20),
        IN _especialidad varchar(20),
        IN _turno varchar(10)
)
BEGIN
		insert into persona (nombres,apellidos,dni,direccion,fecnac,genero,email,telefono,estado,tipo)
		values (_nombres,_apellidos,_dni,_direccion,_fecnac,_genero,_email,_telefono,_estado,_tipo);
        insert into doctores (especialidad)
        values (_especialidad);
END ;;

###################################3#PROCEDIMIENTOS PARA LISTAR############################################3
DELIMITER ;;
CREATE PROCEDURE up_areas_listar
(
)
BEGIN
SELECT idarea, descripcion from areas order by idarea asc;
END;;

DELIMITER ;;
CREATE PROCEDURE up_persona_listar
(
)
BEGIN
SELECT idpersona, nombres, apellidos, dni, direccion, fecnac, genero, email, telefono, estado, tipo from persona order by idpersona asc;
END;;

DELIMITER ;;
CREATE PROCEDURE up_paciente_listar
(
)
BEGIN
select p.idpersona,concat_ws(' ,', p.nombres, p.apellidos),p.genero,p.telefono,p.estado,p.tipo,pa.nrohistoria
from persona p
inner join paciente pa
on p.idpersona = pa.idpersona;
END;;

DELIMITER ;;
CREATE PROCEDURE up_empleado_listar
(
)
BEGIN
select p.idpersona,concat_ws(' ,', p.nombres, p.apellidos),p.genero,p.telefono,p.estado,p.tipo,em.turno,em.cargo
from persona p
inner join empleados em
on p.idpersona = em.idpersona;
END;;

DELIMITER ;;
CREATE PROCEDURE up_doctores_listar
(
)
BEGIN
select p.idpersona,concat_ws(' ,', p.nombres, p.apellidos),p.genero,p.telefono,p.estado,p.tipo,em.turno,em.cargo
from persona p
inner join empleados em
on p.idpersona = em.idpersona;
END;;
